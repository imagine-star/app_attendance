package com.jigong.app_attendance.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jigong.app_attendance.bean.WorkerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORKER_INFO".
*/
public class WorkerInfoDao extends AbstractDao<WorkerInfo, Long> {

    public static final String TABLENAME = "WORKER_INFO";

    /**
     * Properties of entity WorkerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CustomId = new Property(1, String.class, "customId", false, "CUSTOM_ID");
        public final static Property WorkerId = new Property(2, String.class, "workerId", false, "WORKER_ID");
        public final static Property WorkerCode = new Property(3, String.class, "workerCode", false, "WORKER_CODE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property IdNumber = new Property(5, String.class, "idNumber", false, "ID_NUMBER");
        public final static Property PersonType = new Property(6, String.class, "personType", false, "PERSON_TYPE");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property IdCard = new Property(8, String.class, "idCard", false, "ID_CARD");
        public final static Property CardType = new Property(9, String.class, "cardType", false, "CARD_TYPE");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property PicURI = new Property(11, byte[].class, "picURI", false, "PIC_URI");
        public final static Property GetInfo = new Property(12, boolean.class, "getInfo", false, "GET_INFO");
        public final static Property HasPush = new Property(13, boolean.class, "hasPush", false, "HAS_PUSH");
        public final static Property IsLeader = new Property(14, String.class, "isLeader", false, "IS_LEADER");
        public final static Property WorkRole = new Property(15, String.class, "workRole", false, "WORK_ROLE");
        public final static Property WoreType = new Property(16, String.class, "woreType", false, "WORE_TYPE");
        public final static Property FaceImage = new Property(17, String.class, "faceImage", false, "FACE_IMAGE");
        public final static Property Present = new Property(18, boolean.class, "present", false, "PRESENT");
    }


    public WorkerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORKER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CUSTOM_ID\" TEXT," + // 1: customId
                "\"WORKER_ID\" TEXT," + // 2: workerId
                "\"WORKER_CODE\" TEXT," + // 3: workerCode
                "\"NAME\" TEXT," + // 4: name
                "\"ID_NUMBER\" TEXT," + // 5: idNumber
                "\"PERSON_TYPE\" TEXT," + // 6: personType
                "\"GENDER\" TEXT," + // 7: gender
                "\"ID_CARD\" TEXT," + // 8: idCard
                "\"CARD_TYPE\" TEXT," + // 9: cardType
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"PIC_URI\" BLOB," + // 11: picURI
                "\"GET_INFO\" INTEGER NOT NULL ," + // 12: getInfo
                "\"HAS_PUSH\" INTEGER NOT NULL ," + // 13: hasPush
                "\"IS_LEADER\" TEXT," + // 14: isLeader
                "\"WORK_ROLE\" TEXT," + // 15: workRole
                "\"WORE_TYPE\" TEXT," + // 16: woreType
                "\"FACE_IMAGE\" TEXT," + // 17: faceImage
                "\"PRESENT\" INTEGER NOT NULL );"); // 18: present
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORKER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindString(2, customId);
        }
 
        String workerId = entity.getWorkerId();
        if (workerId != null) {
            stmt.bindString(3, workerId);
        }
 
        String workerCode = entity.getWorkerCode();
        if (workerCode != null) {
            stmt.bindString(4, workerCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(6, idNumber);
        }
 
        String personType = entity.getPersonType();
        if (personType != null) {
            stmt.bindString(7, personType);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(9, idCard);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(10, cardType);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        byte[] picURI = entity.getPicURI();
        if (picURI != null) {
            stmt.bindBlob(12, picURI);
        }
        stmt.bindLong(13, entity.getGetInfo() ? 1L: 0L);
        stmt.bindLong(14, entity.getHasPush() ? 1L: 0L);
 
        String isLeader = entity.getIsLeader();
        if (isLeader != null) {
            stmt.bindString(15, isLeader);
        }
 
        String workRole = entity.getWorkRole();
        if (workRole != null) {
            stmt.bindString(16, workRole);
        }
 
        String woreType = entity.getWoreType();
        if (woreType != null) {
            stmt.bindString(17, woreType);
        }
 
        String faceImage = entity.getFaceImage();
        if (faceImage != null) {
            stmt.bindString(18, faceImage);
        }
        stmt.bindLong(19, entity.getPresent() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindString(2, customId);
        }
 
        String workerId = entity.getWorkerId();
        if (workerId != null) {
            stmt.bindString(3, workerId);
        }
 
        String workerCode = entity.getWorkerCode();
        if (workerCode != null) {
            stmt.bindString(4, workerCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(6, idNumber);
        }
 
        String personType = entity.getPersonType();
        if (personType != null) {
            stmt.bindString(7, personType);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(9, idCard);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(10, cardType);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        byte[] picURI = entity.getPicURI();
        if (picURI != null) {
            stmt.bindBlob(12, picURI);
        }
        stmt.bindLong(13, entity.getGetInfo() ? 1L: 0L);
        stmt.bindLong(14, entity.getHasPush() ? 1L: 0L);
 
        String isLeader = entity.getIsLeader();
        if (isLeader != null) {
            stmt.bindString(15, isLeader);
        }
 
        String workRole = entity.getWorkRole();
        if (workRole != null) {
            stmt.bindString(16, workRole);
        }
 
        String woreType = entity.getWoreType();
        if (woreType != null) {
            stmt.bindString(17, woreType);
        }
 
        String faceImage = entity.getFaceImage();
        if (faceImage != null) {
            stmt.bindString(18, faceImage);
        }
        stmt.bindLong(19, entity.getPresent() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WorkerInfo readEntity(Cursor cursor, int offset) {
        WorkerInfo entity = new WorkerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // workerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // workerCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // personType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // idCard
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cardType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11), // picURI
            cursor.getShort(offset + 12) != 0, // getInfo
            cursor.getShort(offset + 13) != 0, // hasPush
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isLeader
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // workRole
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // woreType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // faceImage
            cursor.getShort(offset + 18) != 0 // present
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkerInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkerId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorkerCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPersonType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdCard(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCardType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPicURI(cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11));
        entity.setGetInfo(cursor.getShort(offset + 12) != 0);
        entity.setHasPush(cursor.getShort(offset + 13) != 0);
        entity.setIsLeader(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWorkRole(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWoreType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFaceImage(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPresent(cursor.getShort(offset + 18) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkerInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkerInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkerInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
